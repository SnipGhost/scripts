#!/bin/bash

function log() {
	>&2 echo $@;
}

# Initialize variables
MKVMERGE_BIN="/Applications/MKVToolNix-89.0.app/Contents/MacOS/mkvmerge"
ALLOWED_EXT="mkv"

# Options for mkvmerge
input_dir='.'
output_dir="$(pwd)_merged"
audio_dir="${input_dir}/RUS Sound"
subs_dir="${input_dir}/SUB"

# Flags and arrays
check="no"
force="no"
autoy="no"
declare -a EXTRA_ARGS

while [[ $# -gt 0 ]]; do
  case $1 in
    -i|--input-dir)
      input_dir="$2"
      shift; shift;;
    -o|--output-dir)
      output_dir="$2"
      shift; shift;;
	-a|--audio-dir)
      output_dir="$2"
      shift; shift;;
	-s|--subs-dir)
      subs_dir="$2"
      shift; shift;;
	-e|--allow-ext)
      ALLOWED_EXT="$2"
      shift; shift;;
	-b|--mkvmerge-bin)
      MKVMERGE_BIN="$2"
      shift; shift;;
    -c|--check)
      check="yes"
      shift;;
	-f|--force)
      force="yes"
      shift;;
	-y|--yes)
      autoy="yes"
      shift;;
    -*|--*)
      echo "Unknown option $1"
      exit 1;;
    *)
      EXTRA_ARGS+=("$1")
      shift;;
  esac
done

if [ "$check" = "yes" ]; then
	log "Running in check mode!"
	MKVMERGE_BIN="echo $MKVMERGE_BIN"
fi

### FUNCTIONS ###

# Configurate mkvmerge arguments here:
function mkvmerge() {
	input_video="$1"
	input_audio="$2"
	input_subs="$3"
	output_file="$4"
	shift; shift; shift; shift;
	EXTRA_ARGS=("$@")
	# Commands generated by https://mkvtoolnix.download/
	# Solo Leveling TV-2
	# $MKVMERGE_BIN \
	# 	--ui-language en_US --priority lower \
	# 	--output "$output_file" \
	# 	--language 0:und --track-name "0:Video" --display-dimensions 0:1920x1080 \
	# 	--color-matrix-coefficients 0:1 --color-transfer-characteristics 0:1 --color-primaries 0:1 \
	# 	--language 1:ja --track-name "1:Original" --default-track-flag 1:no --original-flag 1:yes \
	# 	--language 2:en --track-name "2:English subs" --default-track-flag 2:no --sub-charset 2:UTF-8 \
	# 	'(' "$input_video" ')' \
	# 	--language "0:ru" --track-name "0:Studio Band" --default-track-flag 0:yes '(' "$input_audio" ')' \
	# 	--language "0:ru" --track-name "0:Russian subs" --default-track-flag 0:no '(' "$input_subs" ')' \
	# 	--track-order 0:0,1:0,0:1,2:0,0:2 \
	# 	"${EXTRA_ARGS[@]}"
	# Space Battleship Yamato 2199 TV-1
	# $MKVMERGE_BIN \
	# 	--ui-language en_US --priority lower \
	# 	--output "$output_file" \
	# 	--language 0:und --track-name "0:Video" --display-dimensions 0:1920x1080 \
	# 	--language 1:ja --track-name "1:Original" --default-track-flag 1:no --original-flag 1:yes \
	# 	'(' "$input_video" ')' \
	# 	--language 0:ru --track-name "0:Shiza" --default-track-flag 0:yes --forced-display-flag 0:no \
	# 	'(' "$input_audio" ')' \
	# 	--language 0:ru --track-name "0:Russian subs" --default-track-flag 0:no --forced-display-flag 0:no --sub-charset 0:WINDOWS-1251 \
	# 	'(' "$input_subs" ')' \
	# 	--track-order 0:0,1:0,0:1,2:0
	# Space Battleship Yamato 2202 TV-2
	$MKVMERGE_BIN \
		--ui-language en_US --priority lower \
		--output "$output_file" \
		--language 0:en --track-name "0:Video" --display-dimensions 0:1280x720 \
		--language 1:ja --track-name "1:Original" --default-track-flag 1:no --original-flag 1:yes \
		'(' "$input_video" ')' \
		--language 0:ru --track-name "0:Anidub" --default-track-flag 0:yes \
		'(' "$input_audio" ')' \
		--language 0:ru --track-name "0:Russian subs" --default-track-flag 0:no \
		'(' "$input_subs" ')' \
		--track-order 0:0,1:0,0:1,2:0
}

function find_track() {
	dir="$1"
	filename="$2"
	input_track=$(find "$dir" -type f -name "*${filename}*")
	track_count=$(printf "%s\n" "$input_track" | wc -l)
	if [ $track_count -ne 1 ]; then
		log "Failed to find unique track (count=$track_count) for file: $filename"
		echo ""
	fi
	echo "$input_track"
}

function ask_user() {
	while :
	do
		read -p "Continue? (y/n) " choice
		case "$choice" in 
			y|Y ) return 0;;
			n|N ) log "Exiting..."; exit 1;;
			* ) echo "Wrong input, type 'y' or 'n'";;
		esac
		sleep 1
	done
}

### RUNNING ###

mkdir -p "$output_dir"

while IFS="" read -r -d "" input_video <&3
do
	log "=== Try to handle file: $input_video"
	extension=$(echo $input_video | awk -F'.' '{print $(NF)}')
	if [ "$extension" != "$ALLOWED_EXT" ]; then
		log "Wrong video file extension: $extension, expected: $ALLOWED_EXT, skipping..."
		continue
	fi
	filename_unesc=$(basename -s ".${extension}" "$input_video")
	output_file="${output_dir}/${filename_unesc}.${extension}"
	if [ -f "$output_file" ] && [ "$force" = "no" ]; then
		log "Output file with name $output_file already exist, skipping..."
		continue
	fi
	printf -v filename "%q" "$filename_unesc"
	input_audio=$(find_track "$audio_dir" "$filename")
	if [ -z "$input_audio" ]; then
		log "Failed to find audio track, skipping..."
		continue
	fi
	input_subs=$(find_track "$subs_dir" "$filename")
	if [ -z "$input_subs" ]; then
		log "Failed to find subs track, skipping..."
		continue
	fi
	mkvmerge "$input_video" "$input_audio" "$input_subs" "$output_file"
	if [ "$autoy" = "no" ]; then
		ask_user
	fi
done 3< <(find "$input_dir" -type f -maxdepth 1 -name '*.mkv' -print0 | sort -z)
